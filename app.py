import streamlit as st
import openai
import urllib.parse

# Initialisation OpenAI
openai.api_key = st.secrets["openai_api_key"]

response = openai.ChatCompletion.create(
    model="gpt-4-turbo",
    messages=st.session_state.messages
)

# Titre de l'application
st.markdown("üöó **Car Proof IA**")
st.markdown("Bonjour, j'esp√®re que vous allez bien ?, je suis Car proof, ton assitant IA sp√©cialis√© dans l'automobile")
# Historique de conversation
if "messages" not in st.session_state:
    st.session_state.messages = [
        {
            "role": "system",
            "content": (
                "Tu es ChatGPT, un assistant automobile expert. Tu r√©ponds comme un professionnel auto. "
                "Tu analyses chaque demande (pi√®ce, voiture, panne, etc.) et tu donnes des r√©ponses pr√©cises, claires, et utiles. "
                "Tu proposes automatiquement des liens d‚Äôannonces ou de sites sp√©cialis√©s comme Leboncoin, La Centrale, Oscaro, Mister Auto, etc., quand c'est pertinent. "
                "Tu ne poses jamais de questions g√©n√©riques. Tu fais toujours une relance intelligente bas√©e sur la demande pr√©c√©dente. "
                "Tu g√©n√®res des liens adapt√©s automatiquement sans que l‚Äôutilisateur ait besoin de les demander. "
                "Tu fonctionnes comme le vrai ChatGPT, mais uniquement dans le domaine automobile."
                "Tu proposes des qutesions pour en savoir plus sur la demande de l'utilisateur"
                "Tu proposes une cotation de prix pour les voiture en fonction de l'annonce et des r√©parations eventuelles √† r√©aliser"
                "Tu propose des images en lien avec les annonces que tu g√©n√©res"
            )
        }
    ]

# Zone de saisie utilisateur
user_input = st.chat_input("üí¨ Ta demande ici :")

# Affichage de tous les messages pr√©c√©dents
for msg in st.session_state.messages[1:]:
    if msg["role"] == "user":
        with st.chat_message("user"):
            st.markdown(msg["content"])
    elif msg["role"] == "assistant":
        with st.chat_message("assistant"):
            st.markdown(msg["content"])

# Traitement du message utilisateur
if user_input:
    # Afficher le message utilisateur imm√©diatement
    with st.chat_message("user"):
        st.markdown(user_input)

    # Ajouter √† l'historique
    st.session_state.messages.append({"role": "user", "content": user_input})

    # Affichage "en train d‚Äô√©crire"
    with st.chat_message("assistant"):
        with st.spinner("Je r√©fl√©chis..."):
            response = client.chat.completions.create(
                model="gpt-4-turbo",
                messages=st.session_state.messages
            )
            reply = response.choices[0].message.content.strip()
            st.markdown(reply)

    # Sauvegarder la r√©ponse dans l'historique
    st.session_state.messages.append({"role": "assistant", "content": reply})# car-proof-ia
